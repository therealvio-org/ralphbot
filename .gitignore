#Toolings#
############
#direnv
.envrc
.env

# CDK, and CDK asset staging directory
.cdk.staging
cdk.out
ops/node_modules
cdk.context.json

# TS
*.d.ts
ops/src/**/*.js
ops/__tests__/**/*.js

# yarn
yarn-error.log

# Packages #
############
# it's better to unpack these files and commit the raw source
# git has its own built in compression methods
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Logs and databases #
######################
*.log
*.sql
*.sqlite

# OS generated files #
######################
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Go-Specifics #
######################
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Build Outputs
src/bin/

# Dependency directories (remove the comment below to include it)
# vendor/

# FIXME
# For some bullshit reason, either since golang 1.21.4, or the Go VSCode extension update 
# v0.40.0 - 15 Nov, 2023 (likely the extension) fucked up something because now modules are 
# installing in the root of a project. Even after selecting a Go environment in vscode, the packages
# still leave behind a pkg directory that is dependant. This will have to do until I can figure out 
# what is going on here
bin
pkg